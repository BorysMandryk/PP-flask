openapi: 3.0.1
info:
  title: Online pharmacy
  version: 1.0.0
tags:
  - name: user
  - name: medication
  - name: store

paths:
  /medication:
    post:
      tags:
        - medication
      security:
        - ProvisorAuth: [ ]
      summary: Add new medication.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medication'
        required: true
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

  /medication/{medicationId}:
    get:
      tags:
        - medication
      summary: Get a medication by ID.
      parameters:
        - in: path
          name: medicationId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        '400':
          description: Invalid ID
        '404':
          description: Medication not found
    put:
      tags:
        - medication
      security:
        - ProvisorAuth: [ ]
      summary: Change information about medication.
      parameters:
        - in: path
          name: medicationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medication'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        '400':
          description: Invalid ID
        '401':
          description: Unauthorized
        '404':
          description: Medication not found

  /user:
    post:
      tags:
        - user
      summary: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: True
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid data
  /user/login:
    get:
      tags:
        - user
      summary: Log user into the system.
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username or password
  /user/logout:
    get:
      security:
        - UserAuth: [ ]
        - ProvisorAuth: [ ]
      tags:
        - user
      summary: Log out current user.
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
  /user/{userId}:
    get:
      security:
        - UserAuth: [ ]
        - ProvisorAuth: [ ]
      tags:
        - user
      summary: Get user by ID.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: User not found
    put:
      security:
        - UserAuth: [ ]
        - ProvisorAuth: [ ]
      tags:
        - user
      summary: Update user.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      security:
        - UserAuth: [ ]
        - ProvisorAuth: [ ]
      tags:
        - user
      summary: Delete user.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /store/order:
    post:
      security:
        - UserAuth: [ ]
      tags:
        - store
      summary: Create an order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '201':
          description: Medication is not in stock, create demand
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demand'
        '400':
          description: Invalid data
        '401':
          description: Unauthorized
  /store/order/{orderId}:
    get:
      security:
        - UserAuth: [ ]
        - ProvisorAuth: [ ]
      tags:
        - store
      summary: Get order by ID.
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID
        '401':
          description: Unauthorized
        '404':
          description: Order not found
  /store/demand:
    get:
      security:
        - ProvisorAuth: [ ]
      tags:
        - store
      responses:
        '200':
          description: Return list of demands
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Demand'
        '403':
          description: No permission
components:
  securitySchemes:
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ProvisorAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        password:
          type: string
    Medication:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        cost:
          type: number
        quantity:
          type: integer
        inStock:
          type: boolean
    Order:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        medication:
          $ref: '#/components/schemas/Medication'
        amount:
          type: integer
        completed:
          type: boolean
    Demand:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        medication:
          $ref: '#/components/schemas/Medication'
        amount:
          type: integer
